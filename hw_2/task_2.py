"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd(number, even=[], odd=[]):
    res = str(number)[-1]
    res_even = even
    res_odd = odd
    if number == 0:
        return f'Количество четных и нечетных цифр в числе равно: {len(res_even), len(res_odd)}'
    elif int(res) % 2 == 0:
        res_even.append(int(res))
        return even_odd(number // 10, res_even, res_odd)
    elif int(res) % 2 == 1:
        res_odd.append(int(res))
        return even_odd(number // 10, res_even, res_odd)


print(even_odd(1234567890))
